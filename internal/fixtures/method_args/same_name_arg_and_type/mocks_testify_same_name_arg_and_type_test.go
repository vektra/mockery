// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// TEST MOCKERY BOILERPLATE

package same_name_arg_and_type

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockinterfaceA creates a new instance of MockinterfaceA. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinterfaceA(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinterfaceA {
	mock := &MockinterfaceA{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockinterfaceA is an autogenerated mock type for the interfaceA type
type MockinterfaceA struct {
	mock.Mock
}

type MockinterfaceA_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinterfaceA) EXPECT() *MockinterfaceA_Expecter {
	return &MockinterfaceA_Expecter{mock: &_m.Mock}
}

// DoB provides a mock function for the type MockinterfaceA
func (_mock *MockinterfaceA) DoB(interfaceB1 interfaceB) interfaceB {
	ret := _mock.Called(interfaceB1)

	if len(ret) == 0 {
		panic("no return value specified for DoB")
	}

	var r0 interfaceB
	if returnFunc, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {
		r0 = returnFunc(interfaceB1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaceB)
		}
	}
	return r0
}

// MockinterfaceA_DoB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoB'
type MockinterfaceA_DoB_Call struct {
	*mock.Call
}

// DoB is a helper method to define mock.On call
//   - interfaceB1
func (_e *MockinterfaceA_Expecter) DoB(interfaceB1 interface{}) *MockinterfaceA_DoB_Call {
	return &MockinterfaceA_DoB_Call{Call: _e.mock.On("DoB", interfaceB1)}
}

func (_c *MockinterfaceA_DoB_Call) Run(run func(interfaceB1 interfaceB)) *MockinterfaceA_DoB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaceB))
	})
	return _c
}

func (_c *MockinterfaceA_DoB_Call) Return(interfaceBMoqParam interfaceB) *MockinterfaceA_DoB_Call {
	_c.Call.Return(interfaceBMoqParam)
	return _c
}

func (_c *MockinterfaceA_DoB_Call) RunAndReturn(run func(interfaceB1 interfaceB) interfaceB) *MockinterfaceA_DoB_Call {
	_c.Call.Return(run)
	return _c
}

// DoB0 provides a mock function for the type MockinterfaceA
func (_mock *MockinterfaceA) DoB0(interfaceB interfaceB0) interfaceB0 {
	ret := _mock.Called(interfaceB)

	if len(ret) == 0 {
		panic("no return value specified for DoB0")
	}

	var r0 interfaceB0
	if returnFunc, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {
		r0 = returnFunc(interfaceB)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaceB0)
		}
	}
	return r0
}

// MockinterfaceA_DoB0_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoB0'
type MockinterfaceA_DoB0_Call struct {
	*mock.Call
}

// DoB0 is a helper method to define mock.On call
//   - interfaceB
func (_e *MockinterfaceA_Expecter) DoB0(interfaceB interface{}) *MockinterfaceA_DoB0_Call {
	return &MockinterfaceA_DoB0_Call{Call: _e.mock.On("DoB0", interfaceB)}
}

func (_c *MockinterfaceA_DoB0_Call) Run(run func(interfaceB interfaceB0)) *MockinterfaceA_DoB0_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaceB0))
	})
	return _c
}

func (_c *MockinterfaceA_DoB0_Call) Return(interfaceB0MoqParam interfaceB0) *MockinterfaceA_DoB0_Call {
	_c.Call.Return(interfaceB0MoqParam)
	return _c
}

func (_c *MockinterfaceA_DoB0_Call) RunAndReturn(run func(interfaceB interfaceB0) interfaceB0) *MockinterfaceA_DoB0_Call {
	_c.Call.Return(run)
	return _c
}

// DoB0v2 provides a mock function for the type MockinterfaceA
func (_mock *MockinterfaceA) DoB0v2(interfaceB01 interfaceB0) interfaceB0 {
	ret := _mock.Called(interfaceB01)

	if len(ret) == 0 {
		panic("no return value specified for DoB0v2")
	}

	var r0 interfaceB0
	if returnFunc, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {
		r0 = returnFunc(interfaceB01)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaceB0)
		}
	}
	return r0
}

// MockinterfaceA_DoB0v2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoB0v2'
type MockinterfaceA_DoB0v2_Call struct {
	*mock.Call
}

// DoB0v2 is a helper method to define mock.On call
//   - interfaceB01
func (_e *MockinterfaceA_Expecter) DoB0v2(interfaceB01 interface{}) *MockinterfaceA_DoB0v2_Call {
	return &MockinterfaceA_DoB0v2_Call{Call: _e.mock.On("DoB0v2", interfaceB01)}
}

func (_c *MockinterfaceA_DoB0v2_Call) Run(run func(interfaceB01 interfaceB0)) *MockinterfaceA_DoB0v2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaceB0))
	})
	return _c
}

func (_c *MockinterfaceA_DoB0v2_Call) Return(interfaceB0MoqParam interfaceB0) *MockinterfaceA_DoB0v2_Call {
	_c.Call.Return(interfaceB0MoqParam)
	return _c
}

func (_c *MockinterfaceA_DoB0v2_Call) RunAndReturn(run func(interfaceB01 interfaceB0) interfaceB0) *MockinterfaceA_DoB0v2_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinterfaceB creates a new instance of MockinterfaceB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinterfaceB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinterfaceB {
	mock := &MockinterfaceB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockinterfaceB is an autogenerated mock type for the interfaceB type
type MockinterfaceB struct {
	mock.Mock
}

type MockinterfaceB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinterfaceB) EXPECT() *MockinterfaceB_Expecter {
	return &MockinterfaceB_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function for the type MockinterfaceB
func (_mock *MockinterfaceB) GetData() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockinterfaceB_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockinterfaceB_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *MockinterfaceB_Expecter) GetData() *MockinterfaceB_GetData_Call {
	return &MockinterfaceB_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *MockinterfaceB_GetData_Call) Run(run func()) *MockinterfaceB_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinterfaceB_GetData_Call) Return(n int) *MockinterfaceB_GetData_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockinterfaceB_GetData_Call) RunAndReturn(run func() int) *MockinterfaceB_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinterfaceB0 creates a new instance of MockinterfaceB0. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinterfaceB0(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinterfaceB0 {
	mock := &MockinterfaceB0{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockinterfaceB0 is an autogenerated mock type for the interfaceB0 type
type MockinterfaceB0 struct {
	mock.Mock
}

type MockinterfaceB0_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinterfaceB0) EXPECT() *MockinterfaceB0_Expecter {
	return &MockinterfaceB0_Expecter{mock: &_m.Mock}
}

// DoB0 provides a mock function for the type MockinterfaceB0
func (_mock *MockinterfaceB0) DoB0(interfaceB01 interfaceB0) interfaceB0 {
	ret := _mock.Called(interfaceB01)

	if len(ret) == 0 {
		panic("no return value specified for DoB0")
	}

	var r0 interfaceB0
	if returnFunc, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {
		r0 = returnFunc(interfaceB01)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaceB0)
		}
	}
	return r0
}

// MockinterfaceB0_DoB0_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoB0'
type MockinterfaceB0_DoB0_Call struct {
	*mock.Call
}

// DoB0 is a helper method to define mock.On call
//   - interfaceB01
func (_e *MockinterfaceB0_Expecter) DoB0(interfaceB01 interface{}) *MockinterfaceB0_DoB0_Call {
	return &MockinterfaceB0_DoB0_Call{Call: _e.mock.On("DoB0", interfaceB01)}
}

func (_c *MockinterfaceB0_DoB0_Call) Run(run func(interfaceB01 interfaceB0)) *MockinterfaceB0_DoB0_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaceB0))
	})
	return _c
}

func (_c *MockinterfaceB0_DoB0_Call) Return(interfaceB0MoqParam interfaceB0) *MockinterfaceB0_DoB0_Call {
	_c.Call.Return(interfaceB0MoqParam)
	return _c
}

func (_c *MockinterfaceB0_DoB0_Call) RunAndReturn(run func(interfaceB01 interfaceB0) interfaceB0) *MockinterfaceB0_DoB0_Call {
	_c.Call.Return(run)
	return _c
}
