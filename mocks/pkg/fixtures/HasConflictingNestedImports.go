// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	http "net/http"

	fixtureshttp "github.com/vektra/mockery/v2/pkg/fixtures/http"

	mock "github.com/stretchr/testify/mock"
)

// HasConflictingNestedImports is an autogenerated mock type for the HasConflictingNestedImports type
type HasConflictingNestedImports struct {
	mock.Mock
}

func (_m *HasConflictingNestedImports) On_Get(path string, r_a0 http.Response, r_a1 error) *mock.Call {
	return _m.Mock.On("Get", path).Return(r_a0, r_a1)
}

// Get provides a mock function with given fields: path
func (_m *HasConflictingNestedImports) Get(path string) (http.Response, error) {
	ret := _m.Called(path)

	var r0 http.Response
	if rf, ok := ret.Get(0).(func(string) http.Response); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(http.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *HasConflictingNestedImports) On_Z(r_a0 fixtureshttp.MyStruct) *mock.Call {
	return _m.Mock.On("Z").Return(r_a0)
}

// Z provides a mock function with given fields:
func (_m *HasConflictingNestedImports) Z() fixtureshttp.MyStruct {
	ret := _m.Called()

	var r0 fixtureshttp.MyStruct
	if rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fixtureshttp.MyStruct)
	}

	return r0
}
