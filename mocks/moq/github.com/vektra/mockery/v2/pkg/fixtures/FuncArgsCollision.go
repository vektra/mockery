// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package testfoo

import (
	"sync"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// Ensure, that FuncArgsCollision does implement test.FuncArgsCollision.
// If this is not the case, regenerate this file with moq.
var _ test.FuncArgsCollision = &FuncArgsCollision{}

// FuncArgsCollision is a mock implementation of test.FuncArgsCollision.
//
//	func TestSomethingThatUsesFuncArgsCollision(t *testing.T) {
//
//		// make and configure a mocked test.FuncArgsCollision
//		mockedFuncArgsCollision := &FuncArgsCollision{
//			FooFunc: func(ret interface{}) error {
//				panic("mock out the Foo method")
//			},
//		}
//
//		// use mockedFuncArgsCollision in code that requires test.FuncArgsCollision
//		// and then make assertions.
//
//	}
type FuncArgsCollision struct {
	// FooFunc mocks the Foo method.
	FooFunc func(ret interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Foo holds details about calls to the Foo method.
		Foo []struct {
			// Ret is the ret argument value.
			Ret interface{}
		}
	}
	lockFoo sync.RWMutex
}

// Foo calls FooFunc.
func (mock *FuncArgsCollision) Foo(ret interface{}) error {
	if mock.FooFunc == nil {
		panic("FuncArgsCollision.FooFunc: method is nil but FuncArgsCollision.Foo was just called")
	}
	callInfo := struct {
		Ret interface{}
	}{
		Ret: ret,
	}
	mock.lockFoo.Lock()
	mock.calls.Foo = append(mock.calls.Foo, callInfo)
	mock.lockFoo.Unlock()
	return mock.FooFunc(ret)
}

// FooCalls gets all the calls that were made to Foo.
// Check the length with:
//
//	len(mockedFuncArgsCollision.FooCalls())
func (mock *FuncArgsCollision) FooCalls() []struct {
	Ret interface{}
} {
	var calls []struct {
		Ret interface{}
	}
	mock.lockFoo.RLock()
	calls = mock.calls.Foo
	mock.lockFoo.RUnlock()
	return calls
}
