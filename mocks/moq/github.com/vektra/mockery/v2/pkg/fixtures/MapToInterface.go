// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package testfoo

import (
	"sync"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// Ensure, that MapToInterface does implement test.MapToInterface.
// If this is not the case, regenerate this file with moq.
var _ test.MapToInterface = &MapToInterface{}

// MapToInterface is a mock implementation of test.MapToInterface.
//
//	func TestSomethingThatUsesMapToInterface(t *testing.T) {
//
//		// make and configure a mocked test.MapToInterface
//		mockedMapToInterface := &MapToInterface{
//			FooFunc: func(arg1 ...map[string]interface{})  {
//				panic("mock out the Foo method")
//			},
//		}
//
//		// use mockedMapToInterface in code that requires test.MapToInterface
//		// and then make assertions.
//
//	}
type MapToInterface struct {
	// FooFunc mocks the Foo method.
	FooFunc func(arg1 ...map[string]interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Foo holds details about calls to the Foo method.
		Foo []struct {
			// Arg1 is the arg1 argument value.
			Arg1 []map[string]interface{}
		}
	}
	lockFoo sync.RWMutex
}

// Foo calls FooFunc.
func (mock *MapToInterface) Foo(arg1 ...map[string]interface{}) {
	if mock.FooFunc == nil {
		panic("MapToInterface.FooFunc: method is nil but MapToInterface.Foo was just called")
	}
	callInfo := struct {
		Arg1 []map[string]interface{}
	}{
		Arg1: arg1,
	}
	mock.lockFoo.Lock()
	mock.calls.Foo = append(mock.calls.Foo, callInfo)
	mock.lockFoo.Unlock()
	mock.FooFunc(arg1...)
}

// FooCalls gets all the calls that were made to Foo.
// Check the length with:
//
//	len(mockedMapToInterface.FooCalls())
func (mock *MapToInterface) FooCalls() []struct {
	Arg1 []map[string]interface{}
} {
	var calls []struct {
		Arg1 []map[string]interface{}
	}
	mock.lockFoo.RLock()
	calls = mock.calls.Foo
	mock.lockFoo.RUnlock()
	return calls
}
