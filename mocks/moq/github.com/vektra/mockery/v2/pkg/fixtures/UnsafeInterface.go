// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package testfoo

import (
	"sync"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// Ensure, that UnsafeInterface does implement test.UnsafeInterface.
// If this is not the case, regenerate this file with moq.
var _ test.UnsafeInterface = &UnsafeInterface{}

// UnsafeInterface is a mock implementation of test.UnsafeInterface.
//
//	func TestSomethingThatUsesUnsafeInterface(t *testing.T) {
//
//		// make and configure a mocked test.UnsafeInterface
//		mockedUnsafeInterface := &UnsafeInterface{
//			DoFunc: func(ptr *Pointer)  {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedUnsafeInterface in code that requires test.UnsafeInterface
//		// and then make assertions.
//
//	}
type UnsafeInterface struct {
	// DoFunc mocks the Do method.
	DoFunc func(ptr *Pointer)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ptr is the ptr argument value.
			Ptr *Pointer
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *UnsafeInterface) Do(ptr *Pointer) {
	if mock.DoFunc == nil {
		panic("UnsafeInterface.DoFunc: method is nil but UnsafeInterface.Do was just called")
	}
	callInfo := struct {
		Ptr *Pointer
	}{
		Ptr: ptr,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	mock.DoFunc(ptr)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedUnsafeInterface.DoCalls())
func (mock *UnsafeInterface) DoCalls() []struct {
	Ptr *Pointer
} {
	var calls []struct {
		Ptr *Pointer
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
