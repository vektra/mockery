// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"net/http"
	"sync"

	my_http "github.com/vektra/mockery/v2/pkg/fixtures/http"
)

// Ensure, that HasConflictingNestedImportsMoq does implement HasConflictingNestedImports.
// If this is not the case, regenerate this file with moq.
var _ HasConflictingNestedImports = &HasConflictingNestedImportsMoq{}

// HasConflictingNestedImportsMoq is a mock implementation of HasConflictingNestedImports.
//
//	func TestSomethingThatUsesHasConflictingNestedImports(t *testing.T) {
//
//		// make and configure a mocked HasConflictingNestedImports
//		mockedHasConflictingNestedImports := &HasConflictingNestedImportsMoq{
//			GetFunc: func(path string) (http.Response, error) {
//				panic("mock out the Get method")
//			},
//			ZFunc: func() my_http.MyStruct {
//				panic("mock out the Z method")
//			},
//		}
//
//		// use mockedHasConflictingNestedImports in code that requires HasConflictingNestedImports
//		// and then make assertions.
//
//	}
type HasConflictingNestedImportsMoq struct {
	// GetFunc mocks the Get method.
	GetFunc func(path string) (http.Response, error)

	// ZFunc mocks the Z method.
	ZFunc func() my_http.MyStruct

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Path is the path argument value.
			Path string
		}
		// Z holds details about calls to the Z method.
		Z []struct {
		}
	}
	lockGet sync.RWMutex
	lockZ   sync.RWMutex
}

// Get calls GetFunc.
func (mock *HasConflictingNestedImportsMoq) Get(path string) (http.Response, error) {
	if mock.GetFunc == nil {
		panic("HasConflictingNestedImportsMoq.GetFunc: method is nil but HasConflictingNestedImports.Get was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(path)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedHasConflictingNestedImports.GetCalls())
func (mock *HasConflictingNestedImportsMoq) GetCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// ResetGetCalls reset all the calls that were made to Get.
func (mock *HasConflictingNestedImportsMoq) ResetGetCalls() {
	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()
}

// Z calls ZFunc.
func (mock *HasConflictingNestedImportsMoq) Z() my_http.MyStruct {
	if mock.ZFunc == nil {
		panic("HasConflictingNestedImportsMoq.ZFunc: method is nil but HasConflictingNestedImports.Z was just called")
	}
	callInfo := struct {
	}{}
	mock.lockZ.Lock()
	mock.calls.Z = append(mock.calls.Z, callInfo)
	mock.lockZ.Unlock()
	return mock.ZFunc()
}

// ZCalls gets all the calls that were made to Z.
// Check the length with:
//
//	len(mockedHasConflictingNestedImports.ZCalls())
func (mock *HasConflictingNestedImportsMoq) ZCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockZ.RLock()
	calls = mock.calls.Z
	mock.lockZ.RUnlock()
	return calls
}

// ResetZCalls reset all the calls that were made to Z.
func (mock *HasConflictingNestedImportsMoq) ResetZCalls() {
	mock.lockZ.Lock()
	mock.calls.Z = nil
	mock.lockZ.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *HasConflictingNestedImportsMoq) ResetCalls() {
	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()

	mock.lockZ.Lock()
	mock.calls.Z = nil
	mock.lockZ.Unlock()
}
