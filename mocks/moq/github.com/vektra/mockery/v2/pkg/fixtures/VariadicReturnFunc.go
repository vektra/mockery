// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package testfoo

import (
	"sync"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// Ensure, that VariadicReturnFunc does implement test.VariadicReturnFunc.
// If this is not the case, regenerate this file with moq.
var _ test.VariadicReturnFunc = &VariadicReturnFunc{}

// VariadicReturnFunc is a mock implementation of test.VariadicReturnFunc.
//
//	func TestSomethingThatUsesVariadicReturnFunc(t *testing.T) {
//
//		// make and configure a mocked test.VariadicReturnFunc
//		mockedVariadicReturnFunc := &VariadicReturnFunc{
//			SampleMethodFunc: func(str string) func(str string, arr []int, a ...interface{}) {
//				panic("mock out the SampleMethod method")
//			},
//		}
//
//		// use mockedVariadicReturnFunc in code that requires test.VariadicReturnFunc
//		// and then make assertions.
//
//	}
type VariadicReturnFunc struct {
	// SampleMethodFunc mocks the SampleMethod method.
	SampleMethodFunc func(str string) func(str string, arr []int, a ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// SampleMethod holds details about calls to the SampleMethod method.
		SampleMethod []struct {
			// Str is the str argument value.
			Str string
		}
	}
	lockSampleMethod sync.RWMutex
}

// SampleMethod calls SampleMethodFunc.
func (mock *VariadicReturnFunc) SampleMethod(str string) func(str string, arr []int, a ...interface{}) {
	if mock.SampleMethodFunc == nil {
		panic("VariadicReturnFunc.SampleMethodFunc: method is nil but VariadicReturnFunc.SampleMethod was just called")
	}
	callInfo := struct {
		Str string
	}{
		Str: str,
	}
	mock.lockSampleMethod.Lock()
	mock.calls.SampleMethod = append(mock.calls.SampleMethod, callInfo)
	mock.lockSampleMethod.Unlock()
	return mock.SampleMethodFunc(str)
}

// SampleMethodCalls gets all the calls that were made to SampleMethod.
// Check the length with:
//
//	len(mockedVariadicReturnFunc.SampleMethodCalls())
func (mock *VariadicReturnFunc) SampleMethodCalls() []struct {
	Str string
} {
	var calls []struct {
		Str string
	}
	mock.lockSampleMethod.RLock()
	calls = mock.calls.SampleMethod
	mock.lockSampleMethod.RUnlock()
	return calls
}
