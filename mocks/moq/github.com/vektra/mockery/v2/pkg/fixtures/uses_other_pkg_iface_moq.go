// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package test

import (
	"sync"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// Ensure, that UsesOtherPkgIfaceMoq does implement test.UsesOtherPkgIface.
// If this is not the case, regenerate this file with moq.
var _ test.UsesOtherPkgIface = &UsesOtherPkgIfaceMoq{}

// UsesOtherPkgIfaceMoq is a mock implementation of test.UsesOtherPkgIface.
//
//	func TestSomethingThatUsesUsesOtherPkgIface(t *testing.T) {
//
//		// make and configure a mocked test.UsesOtherPkgIface
//		mockedUsesOtherPkgIface := &UsesOtherPkgIfaceMoq{
//			DoSomethingElseFunc: func(obj test.Sibling)  {
//				panic("mock out the DoSomethingElse method")
//			},
//		}
//
//		// use mockedUsesOtherPkgIface in code that requires test.UsesOtherPkgIface
//		// and then make assertions.
//
//	}
type UsesOtherPkgIfaceMoq struct {
	// DoSomethingElseFunc mocks the DoSomethingElse method.
	DoSomethingElseFunc func(obj test.Sibling)

	// calls tracks calls to the methods.
	calls struct {
		// DoSomethingElse holds details about calls to the DoSomethingElse method.
		DoSomethingElse []struct {
			// Obj is the obj argument value.
			Obj test.Sibling
		}
	}
	lockDoSomethingElse sync.RWMutex
}

// DoSomethingElse calls DoSomethingElseFunc.
func (mock *UsesOtherPkgIfaceMoq) DoSomethingElse(obj test.Sibling) {
	if mock.DoSomethingElseFunc == nil {
		panic("UsesOtherPkgIfaceMoq.DoSomethingElseFunc: method is nil but UsesOtherPkgIface.DoSomethingElse was just called")
	}
	callInfo := struct {
		Obj test.Sibling
	}{
		Obj: obj,
	}
	mock.lockDoSomethingElse.Lock()
	mock.calls.DoSomethingElse = append(mock.calls.DoSomethingElse, callInfo)
	mock.lockDoSomethingElse.Unlock()
	mock.DoSomethingElseFunc(obj)
}

// DoSomethingElseCalls gets all the calls that were made to DoSomethingElse.
// Check the length with:
//
//	len(mockedUsesOtherPkgIface.DoSomethingElseCalls())
func (mock *UsesOtherPkgIfaceMoq) DoSomethingElseCalls() []struct {
	Obj test.Sibling
} {
	var calls []struct {
		Obj test.Sibling
	}
	mock.lockDoSomethingElse.RLock()
	calls = mock.calls.DoSomethingElse
	mock.lockDoSomethingElse.RUnlock()
	return calls
}

// ResetDoSomethingElseCalls reset all the calls that were made to DoSomethingElse.
func (mock *UsesOtherPkgIfaceMoq) ResetDoSomethingElseCalls() {
	mock.lockDoSomethingElse.Lock()
	mock.calls.DoSomethingElse = nil
	mock.lockDoSomethingElse.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *UsesOtherPkgIfaceMoq) ResetCalls() {
	mock.lockDoSomethingElse.Lock()
	mock.calls.DoSomethingElse = nil
	mock.lockDoSomethingElse.Unlock()
}
