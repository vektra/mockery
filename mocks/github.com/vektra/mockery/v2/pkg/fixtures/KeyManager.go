// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// KeyManager is an autogenerated mock type for the KeyManager type
type KeyManager struct {
	mock.Mock
}

type KeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyManager) EXPECT() *KeyManager_Expecter {
	return &KeyManager_Expecter{mock: &_m.Mock}
}

// GetKey provides a mock function with given fields: _a0, _a1
func (_m *KeyManager) GetKey(_a0 string, _a1 uint16) ([]byte, *test.Err) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	var r1 *test.Err
	if rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*test.Err)
		}
	}

	return r0, r1
}

// KeyManager_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type KeyManager_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
//   - _a0 string
//   - _a1 uint16
func (_e *KeyManager_Expecter) GetKey(_a0 interface{}, _a1 interface{}) *KeyManager_GetKey_Call {
	return &KeyManager_GetKey_Call{Call: _e.mock.On("GetKey", _a0, _a1)}
}

func (_c *KeyManager_GetKey_Call) Run(run func(_a0 string, _a1 uint16)) *KeyManager_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint16))
	})
	return _c
}

func (_c *KeyManager_GetKey_Call) Return(_a0 []byte, _a1 *test.Err) *KeyManager_GetKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyManager_GetKey_Call) RunAndReturn(run func(string, uint16) ([]byte, *test.Err)) *KeyManager_GetKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyManager creates a new instance of KeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}, expectedCalls ...*mock.Call) *KeyManager {
	mock := &KeyManager{}
	mock.Mock.Test(t)
	mock.Mock.ExpectedCalls = expectedCalls

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
