// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SendFunc is an autogenerated mock type for the SendFunc type
type SendFunc struct {
	mock.Mock
}

type SendFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *SendFunc) EXPECT() *SendFunc_Expecter {
	return &SendFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, data
func (_m *SendFunc) Execute(ctx context.Context, data string) (int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SendFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
func (_e *SendFunc_Expecter) Execute(ctx interface{}, data interface{}) *SendFunc_Execute_Call {
	return &SendFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, data)}
}

func (_c *SendFunc_Execute_Call) Run(run func(ctx context.Context, data string)) *SendFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SendFunc_Execute_Call) Return(_a0 int, _a1 error) *SendFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SendFunc_Execute_Call) RunAndReturn(run func(context.Context, string) (int, error)) *SendFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewSendFunc creates a new instance of SendFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSendFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *SendFunc {
	mock := &SendFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
