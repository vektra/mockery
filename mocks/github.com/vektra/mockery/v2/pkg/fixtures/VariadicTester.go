// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	test "github.com/vektra/mockery/v2/pkg/fixtures"
)

// VariadicTester is an autogenerated mock type for the VariadicTester type
type VariadicTester struct {
	mock.Mock
}

// LogMethod provides a mock function with given fields: level
func (_m *VariadicTester) LogMethod(level test.Level) func(string) {
	ret := _m.Called(level)

	var r0 func(string)
	if rf, ok := ret.Get(0).(func(test.Level) func(string)); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(string))
		}
	}

	return r0
}

// LogMethodf provides a mock function with given fields: level
func (_m *VariadicTester) LogMethodf(level test.Level) func(string, ...interface{}) {
	ret := _m.Called(level)

	var r0 func(string, ...interface{})
	if rf, ok := ret.Get(0).(func(test.Level) func(string, ...interface{})); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(string, ...interface{}))
		}
	}

	return r0
}

// NewVariadicTester creates a new instance of VariadicTester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariadicTester(t interface {
	mock.TestingT
	Cleanup(func())
}) *VariadicTester {
	mock := &VariadicTester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
