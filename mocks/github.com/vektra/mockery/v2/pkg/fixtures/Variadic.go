// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Variadic is an autogenerated mock type for the Variadic type
type Variadic struct {
	mock.Mock
}

type Variadic_Expecter struct {
	mock *mock.Mock
}

func (_m *Variadic) EXPECT() *Variadic_Expecter {
	return &Variadic_Expecter{mock: &_m.Mock}
}

// VariadicFunction provides a mock function with given fields: str, vFunc
func (_m *Variadic) VariadicFunction(str string, vFunc func(string, ...interface{}) interface{}) error {
	ret := _m.Called(str, vFunc)

	if len(ret) == 0 {
		panic("no return value specified for VariadicFunction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string, ...interface{}) interface{}) error); ok {
		r0 = rf(str, vFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Variadic_VariadicFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VariadicFunction'
type Variadic_VariadicFunction_Call struct {
	*mock.Call
}

// VariadicFunction is a helper method to define mock.On call
//   - str string
//   - vFunc func(string , ...interface{}) interface{}
func (_e *Variadic_Expecter) VariadicFunction(str interface{}, vFunc ...interface{}) *Variadic_VariadicFunction_Call {
	return &Variadic_VariadicFunction_Call{Call: _e.mock.On("VariadicFunction", str, vFunc)}
}

func (_c *Variadic_VariadicFunction_Call) Run(run func(str string, vFunc func(string, ...interface{}) interface{})) *Variadic_VariadicFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(string, ...interface{}) interface{}))
	})
	return _c
}

func (_c *Variadic_VariadicFunction_Call) Return(_a0 error) *Variadic_VariadicFunction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Variadic_VariadicFunction_Call) RunAndReturn(run func(string, func(string, ...interface{}) interface{}) error) *Variadic_VariadicFunction_Call {
	_c.Call.Return(run)
	return _c
}

// NewVariadic creates a new instance of Variadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *Variadic {
	mock := &Variadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
