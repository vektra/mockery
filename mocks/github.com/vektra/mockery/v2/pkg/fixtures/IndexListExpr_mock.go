// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IndexListExpr is an autogenerated mock type for the IndexListExpr type
type IndexListExpr struct {
	mock.Mock
}

type IndexListExpr_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexListExpr) EXPECT() *IndexListExpr_Expecter {
	return &IndexListExpr_Expecter{mock: &_m.Mock}
}

// Func provides a mock function with given fields: arg1, arg2
func (_m *IndexListExpr) Func(arg1 *int, arg2 string) bool {
	ret := _m.Called(arg1, arg2)

	if len(ret) == 0 {
		panic("no return value specified for Func")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*int, string) bool); ok {
		r0 = rf(arg1, arg2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IndexListExpr_Func_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Func'
type IndexListExpr_Func_Call struct {
	*mock.Call
}

// Func is a helper method to define mock.On call
//   - arg1 *int
//   - arg2 string
func (_e *IndexListExpr_Expecter) Func(arg1 interface{}, arg2 interface{}) *IndexListExpr_Func_Call {
	return &IndexListExpr_Func_Call{Call: _e.mock.On("Func", arg1, arg2)}
}

func (_c *IndexListExpr_Func_Call) Run(run func(arg1 *int, arg2 string)) *IndexListExpr_Func_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int), args[1].(string))
	})
	return _c
}

func (_c *IndexListExpr_Func_Call) Return(_a0 bool) *IndexListExpr_Func_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexListExpr_Func_Call) RunAndReturn(run func(*int, string) bool) *IndexListExpr_Func_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexListExpr creates a new instance of IndexListExpr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexListExpr(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexListExpr {
	mock := &IndexListExpr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
