// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package inpackage

import (
	"sync"
)

// Ensure, that FooMoq does implement Foo.
// If this is not the case, regenerate this file with moq.
var _ Foo = &FooMoq{}

// FooMoq is a mock implementation of Foo.
//
//	func TestSomethingThatUsesFoo(t *testing.T) {
//
//		// make and configure a mocked Foo
//		mockedFoo := &FooMoq{
//			GetFunc: func(key ArgType) ReturnType {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedFoo in code that requires Foo
//		// and then make assertions.
//
//	}
type FooMoq struct {
	// GetFunc mocks the Get method.
	GetFunc func(key ArgType) ReturnType

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key ArgType
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *FooMoq) Get(key ArgType) ReturnType {
	if mock.GetFunc == nil {
		panic("FooMoq.GetFunc: method is nil but Foo.Get was just called")
	}
	callInfo := struct {
		Key ArgType
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedFoo.GetCalls())
func (mock *FooMoq) GetCalls() []struct {
	Key ArgType
} {
	var calls []struct {
		Key ArgType
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
