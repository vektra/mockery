// Code generated by mockery. DO NOT EDIT.

package type_alias_test

import (
	mock "github.com/stretchr/testify/mock"
	subpkg "github.com/vektra/mockery/v2/pkg/fixtures/type_alias/subpkg"
)

// Interface2WithResolvedAlias is an autogenerated mock type for the Interface2 type
type Interface2WithResolvedAlias struct {
	mock.Mock
}

type Interface2WithResolvedAlias_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface2WithResolvedAlias) EXPECT() *Interface2WithResolvedAlias_Expecter {
	return &Interface2WithResolvedAlias_Expecter{mock: &_m.Mock}
}

// F provides a mock function with given fields: _a0, _a1, _a2
func (_m *Interface2WithResolvedAlias) F(_a0 int, _a1 subpkg.S, _a2 subpkg.S) {
	_m.Called(_a0, _a1, _a2)
}

// Interface2WithResolvedAlias_F_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'F'
type Interface2WithResolvedAlias_F_Call struct {
	*mock.Call
}

// F is a helper method to define mock.On call
//   - _a0 int
//   - _a1 subpkg.S
//   - _a2 subpkg.S
func (_e *Interface2WithResolvedAlias_Expecter) F(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Interface2WithResolvedAlias_F_Call {
	return &Interface2WithResolvedAlias_F_Call{Call: _e.mock.On("F", _a0, _a1, _a2)}
}

func (_c *Interface2WithResolvedAlias_F_Call) Run(run func(_a0 int, _a1 subpkg.S, _a2 subpkg.S)) *Interface2WithResolvedAlias_F_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(subpkg.S), args[2].(subpkg.S))
	})
	return _c
}

func (_c *Interface2WithResolvedAlias_F_Call) Return() *Interface2WithResolvedAlias_F_Call {
	_c.Call.Return()
	return _c
}

func (_c *Interface2WithResolvedAlias_F_Call) RunAndReturn(run func(int, subpkg.S, subpkg.S)) *Interface2WithResolvedAlias_F_Call {
	_c.Run(run)
	return _c
}

// NewInterface2WithResolvedAlias creates a new instance of Interface2WithResolvedAlias. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface2WithResolvedAlias(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface2WithResolvedAlias {
	mock := &Interface2WithResolvedAlias{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
